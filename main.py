from BinaryTree import BinaryTree
from BinaryTree import Traversal

if __name__ == '__main__':
    print("Binary TREE")

    bt = BinaryTree()
    bt.insert(3)
    bt.insert(1)
    bt.insert(2)
    bt.insert(4)
    bt.insert(5)
    bt.insert(10)
    bt.insert(7)
    bt.insert(73)
    bt.insert(23)
    bt.print()
    bt.print(traversal_type=Traversal.REVERSE)
    # bst.print(traversal_type=Traversal.PREORDER)
    # bst.print(traversal_type=Traversal.POSTORDER)
    # bst.print(traversal_type=Traversal.INORDER)

    # print('\n')
    # print('After deleting: ')
    # bst.set_root(bst.delete_node(bst.get_root(), 2))
    # bst.set_root(bst.delete_node(bst.get_root(), 73))
    # bst.set_root(bst.delete_node(bst.get_root(), 3))
    # bst.set_root(bst.delete_node(bst.get_root(), 1))
    # bst.set_root(bst.delete_node(bst.get_root(), 4))
    # bst.print()
    # bst.set_root(bst.delete_node(bst.get_root(), 7))
    # bst.set_root(bst.delete_node(bst.get_root(), 5))
    # bst.set_root(bst.delete_node(bst.get_root(), 10))
    # bst.print()
    bt.set_root(bt.clear_all_roots(bt.get_root()))
    bt.print()
    # bst.set_root(bst.delete_node(bst.get_root(), 1))
    # bst.set_root(bst.delete_node(bst.get_root(), 2))
    # bst.print()

    # bst1 = BinarySearchTree()
    # bst1.insert(3)
    # bst1.insert(5)
    # bst1.print()
    # bst1.root = bst1.delete_node(bst1.get_root(), 3)
    # bst1.root = bst1.delete_node(bst1.get_root(), 5)
    # bst1.print()

    tree = BinaryTree()
    tree.add_to_tree(tree.get_root(), 3)
    tree.add_to_tree(tree.get_root(), 1)
    tree.add_to_tree(tree.get_root(), 2)
    tree.add_to_tree(tree.get_root(), 4)
    tree.add_to_tree(tree.get_root(), 5)
    tree.add_to_tree(tree.get_root(), 10)
    tree.add_to_tree(tree.get_root(), 7)
    tree.add_to_tree(tree.get_root(), 73)
    tree.add_to_tree(tree.get_root(), 23)
    tree.print()
    tree.print(traversal_type=Traversal.REVERSE)

    tr = BinaryTree()
    tr.add(3)
    tr.add(1)
    tr.add(2)
    tr.add(4)
    tr.add(5)
    tr.print()
    # tr.delete(3)
    # tr.delete(1)
    # tr.delete(4)
    # tr.delete(2)
    tr.print()
    print("\nafter clear")
    tr.clear()
    # tr.delete(5)
    tr.print()
    btr = BinaryTree()
    btr.insert(3)
    btr.insert(1)
    btr.insert(1)
    btr.insert(2)
    btr.insert(4)
    btr.insert(5)
    btr.insert(10)
    btr.insert(7)
    btr.insert(73)
    btr.insert(23)
    btr.print()
    btr.clear()
    btr.print()
